import { numberFromStringSchema, stringSchema } from './schema'
import { newForm } from './form'
import { constVoid, failure, success } from '@frp-ts/utils'

describe('form', () => {
	describe('newForm', () => {
		it('initializes form with initial state', () => {
			const form = newForm({ foo: stringSchema }, { foo: 'foo' })
			expect(form.get()).toEqual(success({ foo: 'foo' }))
		})
		it('initializes form with all fields isDirty set to false', () => {
			const form = newForm({ foo: stringSchema }, { foo: 'foo' })
			for (const entry of Object.values(form.views)) {
				expect(entry.isDirty.get()).toEqual(false)
			}
		})
		it('initializes form with all fields isDecoded set to true', () => {
			const form = newForm({ foo: stringSchema }, { foo: 'foo' })
			for (const entry of Object.values(form.views)) {
				expect(entry.isDecoded.get()).toEqual(true)
			}
		})
		it('does not decode on initialization', () => {
			const decode = jest.fn(stringSchema.decode)
			newForm({ foo: { ...stringSchema, decode } }, { foo: 'foo' })
			expect(decode).not.toHaveBeenCalled()
		})
	})
	describe('views', () => {
		describe('get', () => {
			it('encodes with schema', () => {
				const form = newForm({ foo: numberFromStringSchema }, { foo: 123 })
				expect(form.views.foo.get()).toBe('123')
			})
		})
		describe('set', () => {
			describe('success', () => {
				describe('local', () => {
					it('updates encoded', () => {
						const form = newForm({ foo: numberFromStringSchema }, { foo: 123 })
						const cb = jest.fn(constVoid)
						form.views.foo.subscribe({ next: cb })
						form.views.foo.set('456')
						expect(form.views.foo.get()).toBe('456')
						expect(cb).toHaveBeenCalledTimes(1)
						cb.mockClear()
						form.views.foo.set('456')
						expect(cb).toHaveBeenCalledTimes(0)
					})
					it('updates isDirty', () => {
						const form = newForm({ foo: numberFromStringSchema }, { foo: 123 })
						const cb = jest.fn(constVoid)
						form.views.foo.isDirty.subscribe({ next: cb })
						form.views.foo.set('456')
						expect(form.views.foo.isDirty.get()).toEqual(true)
						expect(cb).toHaveBeenCalledTimes(1)
						cb.mockClear()
						form.views.foo.set('456')
						expect(cb).toHaveBeenCalledTimes(0)
					})
					it('updates decoded', () => {
						const form = newForm({ foo: numberFromStringSchema }, { foo: 123 })
						const cb = jest.fn(constVoid)
						form.views.foo.isDirty.subscribe({ next: cb })
						form.views.foo.set('456')
						expect(form.views.foo.decoded.get()).toEqual(success(456))
						expect(cb).toHaveBeenCalledTimes(1)
						cb.mockClear()
						form.views.foo.set('456')
						expect(cb).toHaveBeenCalledTimes(0)
					})
					it('updates isDecoded', () => {
						const form = newForm({ foo: numberFromStringSchema }, { foo: 123 })
						const cb = jest.fn(constVoid)
						form.views.foo.isDirty.subscribe({ next: cb })
						form.views.foo.set('456')
						expect(form.views.foo.isDecoded.get()).toEqual(true)
						expect(cb).toHaveBeenCalledTimes(1)
						cb.mockClear()
						form.views.foo.set('456')
						expect(cb).toHaveBeenCalledTimes(0)
					})
				})
				describe('form', () => {
					it('updates value', () => {
						const form = newForm({ foo: numberFromStringSchema }, { foo: 123 })
						const cb = jest.fn(constVoid)
						form.views.foo.isDirty.subscribe({ next: cb })
						form.views.foo.set('456')
						expect(form.get()).toEqual(success({ foo: 456 }))
						expect(cb).toHaveBeenCalledTimes(1)
						cb.mockClear()
						form.views.foo.set('456')
						expect(cb).toHaveBeenCalledTimes(0)
					})
					it('udpates isDirty', () => {
						const form = newForm({ foo: numberFromStringSchema }, { foo: 123 })
						const cb = jest.fn(constVoid)
						form.views.foo.isDirty.subscribe({ next: cb })
						form.views.foo.set('456')
						expect(form.isDirty.get()).toEqual(true)
						expect(cb).toHaveBeenCalledTimes(1)
						cb.mockClear()
						form.views.foo.set('456')
						expect(cb).toHaveBeenCalledTimes(0)
					})
					it('updates isDecoded', () => {
						const form = newForm({ foo: numberFromStringSchema }, { foo: 123 })
						const cb = jest.fn(constVoid)
						form.views.foo.isDirty.subscribe({ next: cb })
						form.views.foo.set('456')
						expect(form.isDecoded.get()).toEqual(true)
						expect(cb).toHaveBeenCalledTimes(1)
						cb.mockClear()
						form.views.foo.set('456')
						expect(cb).toHaveBeenCalledTimes(0)
					})
				})
			})
			describe('failure', () => {
				describe('local', () => {
					it('updates encoded', () => {
						const form = newForm({ foo: numberFromStringSchema }, { foo: 123 })
						const cb = jest.fn(constVoid)
						form.views.foo.subscribe({ next: cb })
						form.views.foo.set('a')
						expect(form.views.foo.get()).toBe('a')
						expect(cb).toHaveBeenCalledTimes(1)
						cb.mockClear()
						form.views.foo.set('a')
						expect(cb).toHaveBeenCalledTimes(0)
					})
					it('updates isDirty', () => {
						const form = newForm({ foo: numberFromStringSchema }, { foo: 123 })
						const cb = jest.fn(constVoid)
						form.views.foo.isDirty.subscribe({ next: cb })
						form.views.foo.set('a')
						expect(form.views.foo.isDirty.get()).toEqual(true)
						expect(cb).toHaveBeenCalledTimes(1)
						cb.mockClear()
						form.views.foo.set('a')
						expect(cb).toHaveBeenCalledTimes(0)
					})
					it('updates decoded', () => {
						const form = newForm({ foo: numberFromStringSchema }, { foo: 123 })
						const cb = jest.fn(constVoid)
						form.views.foo.isDirty.subscribe({ next: cb })
						form.views.foo.set('a')
						expect(form.views.foo.decoded.get()).toEqual(failure(expect.any(Error)))
						expect(cb).toHaveBeenCalledTimes(1)
						cb.mockClear()
						form.views.foo.set('a')
						expect(cb).toHaveBeenCalledTimes(0)
					})
					it('updates isDecoded', () => {
						const form = newForm({ foo: numberFromStringSchema }, { foo: 123 })
						const cb = jest.fn(constVoid)
						form.views.foo.isDirty.subscribe({ next: cb })
						form.views.foo.set('a')
						expect(form.views.foo.isDecoded.get()).toEqual(false)
						expect(cb).toHaveBeenCalledTimes(1)
						cb.mockClear()
						form.views.foo.set('a')
						expect(cb).toHaveBeenCalledTimes(0)
					})
				})
				describe('form', () => {
					it('updates value', () => {
						const form = newForm({ foo: numberFromStringSchema }, { foo: 123 })
						const cb = jest.fn(constVoid)
						form.views.foo.isDirty.subscribe({ next: cb })
						form.views.foo.set('a')
						expect(form.get()).toEqual(failure(expect.any(Error)))
						expect(cb).toHaveBeenCalledTimes(1)
						cb.mockClear()
						form.views.foo.set('a')
						expect(cb).toHaveBeenCalledTimes(0)
					})
					it('udpates isDirty', () => {
						const form = newForm({ foo: numberFromStringSchema }, { foo: 123 })
						const cb = jest.fn(constVoid)
						form.views.foo.isDirty.subscribe({ next: cb })
						form.views.foo.set('a')
						expect(form.isDirty.get()).toEqual(true)
						expect(cb).toHaveBeenCalledTimes(1)
						cb.mockClear()
						form.views.foo.set('a')
						expect(cb).toHaveBeenCalledTimes(0)
					})
					it('updates isDecoded', () => {
						const form = newForm({ foo: numberFromStringSchema }, { foo: 123 })
						const cb = jest.fn(constVoid)
						form.views.foo.isDirty.subscribe({ next: cb })
						form.views.foo.set('a')
						expect(form.isDecoded.get()).toEqual(false)
						expect(cb).toHaveBeenCalledTimes(1)
						cb.mockClear()
						form.views.foo.set('a')
						expect(cb).toHaveBeenCalledTimes(0)
					})
				})
			})
		})
		describe('modify', () => {
			describe('success', () => {
				describe('local', () => {
					it('updates encoded', () => {
						const form = newForm({ foo: numberFromStringSchema }, { foo: 123 })
						const cb = jest.fn(constVoid)
						form.views.foo.subscribe({ next: cb })
						form.views.foo.modify(() => '456')
						expect(form.views.foo.get()).toBe('456')
						expect(cb).toHaveBeenCalledTimes(1)
						cb.mockClear()
						form.views.foo.modify(() => '456')
						expect(cb).toHaveBeenCalledTimes(0)
					})
					it('updates isDirty', () => {
						const form = newForm({ foo: numberFromStringSchema }, { foo: 123 })
						const cb = jest.fn(constVoid)
						form.views.foo.isDirty.subscribe({ next: cb })
						form.views.foo.modify(() => '456')
						expect(form.views.foo.isDirty.get()).toEqual(true)
						expect(cb).toHaveBeenCalledTimes(1)
						cb.mockClear()
						form.views.foo.modify(() => '456')
						expect(cb).toHaveBeenCalledTimes(0)
					})
					it('updates decoded', () => {
						const form = newForm({ foo: numberFromStringSchema }, { foo: 123 })
						const cb = jest.fn(constVoid)
						form.views.foo.isDirty.subscribe({ next: cb })
						form.views.foo.modify(() => '456')
						expect(form.views.foo.decoded.get()).toEqual(success(456))
						expect(cb).toHaveBeenCalledTimes(1)
						cb.mockClear()
						form.views.foo.modify(() => '456')
						expect(cb).toHaveBeenCalledTimes(0)
					})
					it('updates isDecoded', () => {
						const form = newForm({ foo: numberFromStringSchema }, { foo: 123 })
						const cb = jest.fn(constVoid)
						form.views.foo.isDirty.subscribe({ next: cb })
						form.views.foo.modify(() => '456')
						expect(form.views.foo.isDecoded.get()).toEqual(true)
						expect(cb).toHaveBeenCalledTimes(1)
						cb.mockClear()
						form.views.foo.modify(() => '456')
						expect(cb).toHaveBeenCalledTimes(0)
					})
				})
				describe('form', () => {
					it('updates value', () => {
						const form = newForm({ foo: numberFromStringSchema }, { foo: 123 })
						const cb = jest.fn(constVoid)
						form.views.foo.isDirty.subscribe({ next: cb })
						form.views.foo.modify(() => '456')
						expect(form.get()).toEqual(success({ foo: 456 }))
						expect(cb).toHaveBeenCalledTimes(1)
						cb.mockClear()
						form.views.foo.modify(() => '456')
						expect(cb).toHaveBeenCalledTimes(0)
					})
					it('udpates isDirty', () => {
						const form = newForm({ foo: numberFromStringSchema }, { foo: 123 })
						const cb = jest.fn(constVoid)
						form.views.foo.isDirty.subscribe({ next: cb })
						form.views.foo.modify(() => '456')
						expect(form.isDirty.get()).toEqual(true)
						expect(cb).toHaveBeenCalledTimes(1)
						cb.mockClear()
						form.views.foo.modify(() => '456')
						expect(cb).toHaveBeenCalledTimes(0)
					})
					it('updates isDecoded', () => {
						const form = newForm({ foo: numberFromStringSchema }, { foo: 123 })
						const cb = jest.fn(constVoid)
						form.views.foo.isDirty.subscribe({ next: cb })
						form.views.foo.modify(() => '456')
						expect(form.isDecoded.get()).toEqual(true)
						expect(cb).toHaveBeenCalledTimes(1)
						cb.mockClear()
						form.views.foo.modify(() => '456')
						expect(cb).toHaveBeenCalledTimes(0)
					})
				})
			})
			describe('failure', () => {
				describe('local', () => {
					it('updates encoded', () => {
						const form = newForm({ foo: numberFromStringSchema }, { foo: 123 })
						const cb = jest.fn(constVoid)
						form.views.foo.subscribe({ next: cb })
						form.views.foo.modify(() => 'a')
						expect(form.views.foo.get()).toBe('a')
						expect(cb).toHaveBeenCalledTimes(1)
						cb.mockClear()
						form.views.foo.modify(() => 'a')
						expect(cb).toHaveBeenCalledTimes(0)
					})
					it('updates isDirty', () => {
						const form = newForm({ foo: numberFromStringSchema }, { foo: 123 })
						const cb = jest.fn(constVoid)
						form.views.foo.isDirty.subscribe({ next: cb })
						form.views.foo.modify(() => 'a')
						expect(form.views.foo.isDirty.get()).toEqual(true)
						expect(cb).toHaveBeenCalledTimes(1)
						cb.mockClear()
						form.views.foo.modify(() => 'a')
						expect(cb).toHaveBeenCalledTimes(0)
					})
					it('updates decoded', () => {
						const form = newForm({ foo: numberFromStringSchema }, { foo: 123 })
						const cb = jest.fn(constVoid)
						form.views.foo.isDirty.subscribe({ next: cb })
						form.views.foo.modify(() => 'a')
						expect(form.views.foo.decoded.get()).toEqual(failure(expect.any(Error)))
						expect(cb).toHaveBeenCalledTimes(1)
						cb.mockClear()
						form.views.foo.modify(() => 'a')
						expect(cb).toHaveBeenCalledTimes(0)
					})
					it('updates isDecoded', () => {
						const form = newForm({ foo: numberFromStringSchema }, { foo: 123 })
						const cb = jest.fn(constVoid)
						form.views.foo.isDirty.subscribe({ next: cb })
						form.views.foo.modify(() => 'a')
						expect(form.views.foo.isDecoded.get()).toEqual(false)
						expect(cb).toHaveBeenCalledTimes(1)
						cb.mockClear()
						form.views.foo.modify(() => 'a')
						expect(cb).toHaveBeenCalledTimes(0)
					})
				})
				describe('form', () => {
					it('updates value', () => {
						const form = newForm({ foo: numberFromStringSchema }, { foo: 123 })
						const cb = jest.fn(constVoid)
						form.views.foo.isDirty.subscribe({ next: cb })
						form.views.foo.modify(() => 'a')
						expect(form.get()).toEqual(failure(expect.any(Error)))
						expect(cb).toHaveBeenCalledTimes(1)
						cb.mockClear()
						form.views.foo.modify(() => 'a')
						expect(cb).toHaveBeenCalledTimes(0)
					})
					it('udpates isDirty', () => {
						const form = newForm({ foo: numberFromStringSchema }, { foo: 123 })
						const cb = jest.fn(constVoid)
						form.views.foo.isDirty.subscribe({ next: cb })
						form.views.foo.modify(() => 'a')
						expect(form.isDirty.get()).toEqual(true)
						expect(cb).toHaveBeenCalledTimes(1)
						cb.mockClear()
						form.views.foo.modify(() => 'a')
						expect(cb).toHaveBeenCalledTimes(0)
					})
					it('updates isDecoded', () => {
						const form = newForm({ foo: numberFromStringSchema }, { foo: 123 })
						const cb = jest.fn(constVoid)
						form.views.foo.isDirty.subscribe({ next: cb })
						form.views.foo.modify(() => 'a')
						expect(form.isDecoded.get()).toEqual(false)
						expect(cb).toHaveBeenCalledTimes(1)
						cb.mockClear()
						form.views.foo.modify(() => 'a')
						expect(cb).toHaveBeenCalledTimes(0)
					})
				})
			})
		})
	})
	describe('get', () => {
		it('sequences successful views', () => {
			const form = newForm(
				{
					foo: numberFromStringSchema,
					bar: numberFromStringSchema,
				},
				{ foo: 0, bar: 0 },
			)
			form.views.foo.set('123')
			form.views.bar.set('123')
			expect(form.get()).toEqual(success({ foo: 123, bar: 123 }))
		})
		it('sequences failed views', () => {
			const form = newForm(
				{
					foo: numberFromStringSchema,
					bar: numberFromStringSchema,
				},
				{ foo: 0, bar: 0 },
			)
			form.views.foo.set('a')
			form.views.bar.set('a')
			expect(form.get()).toEqual(failure(expect.any(Error)))
		})
	})
})
